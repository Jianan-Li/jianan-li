{"remainingRequest":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/babel-loader/lib/index.js!/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/src/components/MyGraph.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/src/components/MyGraph.vue","mtime":1550154016000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.link\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as d3 from \"d3\";\nexport default {\n  name: \"MyGraph\",\n  data: function data() {\n    return {\n      previousWindowWidth: null,\n      width: null,\n      height: null,\n      gridSize: 100,\n      selections: {},\n      pathStrokeWidth: [1.5, 1.25, 1, 1],\n      circleSizes: [44, 37, 33, 30, 30],\n      fontSizes: [25, 15, 12, 11, 11],\n      linkColor: \"#ffffff\",\n      nonLinkColor: \"#000000\",\n      enlargeRatioOnHover: 2,\n      patterns: [\"Andrew\", \"Jordan\"],\n      simulation: null,\n      zoom: null,\n      forceProperties: {\n        center: {\n          x: 0.5,\n          y: 0.5\n        },\n        charge: {\n          enabled: true,\n          strength: -2000,\n          distanceMin: 1,\n          distanceMax: 2000\n        },\n        collide: {\n          enabled: true,\n          strength: 1,\n          iterations: 1,\n          radius: 55\n        },\n        forceX: {\n          enabled: true,\n          strength: 0.18,\n          x: 0.5\n        },\n        forceY: {\n          enabled: true,\n          strength: 0.28,\n          y: 0.5\n        },\n        link: {\n          enabled: true,\n          distance: 35,\n          iterations: 1\n        }\n      },\n      data: {\n        nodes: [],\n        links: []\n      }\n    };\n  },\n  computed: {\n    innerGridSize: function innerGridSize() {\n      return this.gridSize / 10;\n    },\n    nodes: function nodes() {\n      return this.data.nodes;\n    },\n    links: function links() {\n      return this.data.links;\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    var _this = this;\n\n    // Get initial width when things are mounted\n    // also add listener for width change\n    this.width = document.getElementById(\"interests\").clientWidth;\n    this.height = this.width * 2 / 3; // this.height = this.width>576? (this.width * 2) / 3 : this.width;\n\n    window.addEventListener(\"resize\", this.resizeCanvas); // Attach event listener to prevent scrolling inside the nodes graph\n    // document.getElementById(\"nodes\").addEventListener(\"wheel\", this.scrollListener);\n    // Moved here from created\n\n    this.simulation = d3.forceSimulation().force(\"link\", d3.forceLink()).force(\"charge\", d3.forceManyBody()).force(\"collide\", d3.forceCollide()).force(\"center\", d3.forceCenter()).force(\"forceX\", d3.forceX()).force(\"forceY\", d3.forceY()).on(\"tick\", this.tick); // Call first time to setup default values\n\n    this.updateForces();\n    this.selections.svg = d3.select(this.$el.querySelector(\"svg\"));\n    var svg = this.selections.svg; // Add zoom and panning triggers\n\n    this.zoom = d3.zoom().scaleExtent([1 / 3, 2]).on(\"zoom\", this.zoomed);\n    svg.call(this.zoom); // A background grid to help user experience\n    // The width and height depends on the minimum scale extent and\n    // the + 10% and negative index to create an infinite grid feel\n    // The precedence of this element is important since you'll have\n    // click events on the elements above the grid\n    // this.selections.grid = svg\n    //   .append(\"rect\")\n    //   .attr(\"x\", \"-50%\")\n    //   .attr(\"y\", \"-50%\")\n    //   .attr(\"width\", \"450%\")\n    //   .attr(\"height\", \"450%\")\n    //   .attr(\"fill\", \"url(#grid)\");\n\n    this.selections.graph = svg.append(\"g\"); // const graph = this.selections.graph;\n    // You can set data in any ways you want\n\n    d3.json(\"/mydata.json\").then(function (data) {\n      _this.data = data;\n    }).catch(function (error) {\n      // eslint-disable-next-line\n      console.error(\"Failed to retrieve data. Error: \".concat(error));\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener(\"resize\", this.resizeCanvas); // document.getElementById(\"nodes\").removeEventListener(\"wheel\", this.scrollListener);\n  },\n  methods: {\n    tick: function tick() {\n      // only run when the graph is moving, stops when the graph settles\n      var transform = function transform(d) {\n        // return \"translate(\" + Math.max(30, Math.min(this.width - 30, d.x)) + \",\" + Math.max(30, Math.min(this.height - 30, d.y)) + \")\";\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      };\n\n      var link = function link(d) {\n        return \"M\" + d.source.x + \",\" + d.source.y + \" L\" + d.target.x + \",\" + d.target.y;\n      };\n\n      var graph = this.selections.graph;\n      graph.selectAll(\"path\").attr(\"d\", link);\n      graph.selectAll(\"circle\").attr(\"transform\", transform);\n      graph.selectAll(\"text\").attr(\"transform\", transform);\n    },\n    updateData: function updateData() {\n      var _this2 = this;\n\n      this.simulation.nodes(this.nodes);\n      this.simulation.force(\"link\").links(this.links);\n      var simulation = this.simulation;\n      var graph = this.selections.graph; // Links should only exit if not needed anymore\n\n      graph.selectAll(\"path\").data(this.links).exit().remove();\n      graph.selectAll(\"path\").data(this.links).enter().append(\"path\").attr(\"class\", \"link\").attr(\"stroke-width\", function (l) {\n        return _this2.pathStrokeWidth[l.value];\n      }); // Nodes should always be redrawn to avoid lines above them\n\n      graph.select(\"#circles\").remove();\n      graph.selectAll(\"circle\").remove(); // const circles = graph.append(\"g\").attr(\"id\", \"circles\");\n\n      graph.append(\"g\").attr(\"id\", \"circles\") // .attr(\"filter\", \"url(#f3)\")\n      .selectAll(\"circle\").data(this.nodes).enter().append(\"circle\").attr(\"r\", function (d) {\n        return _this2.circleSizes[d.group];\n      }).attr(\"class\", function (d) {\n        return d.link ? \" my-graph-circle url\" : \"my-graph-circle nonurl\";\n      }).call(d3.drag().on(\"start\", this.nodeDragStarted).on(\"drag\", this.nodeDragged).on(\"end\", this.nodeDragEnded)).on(\"mouseover\", this.nodeMouseOver).on(\"mouseout\", this.nodeMouseOut).on(\"click\", this.nodeClick);\n      graph.selectAll(\"text\").remove();\n      var textRegion = graph.selectAll(\"text\").data(this.nodes).enter();\n      textRegion.filter(function (d) {\n        return d.name;\n      }).append(\"text\").attr(\"x\", \"0em\").attr(\"y\", \"0.14em\") //.31em\n      .attr(\"font-size\", function (d) {\n        return _this2.fontSizes[d.group];\n      }).attr(\"fill\", function (d) {\n        return d.link ? _this2.linkColor : _this2.nonLinkColor;\n      }).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(function (d) {\n        return d.name;\n      });\n      textRegion.filter(function (d) {\n        return d.name1;\n      }).append(\"text\").attr(\"x\", \"0em\").attr(\"y\", \"-0.41em\").attr(\"font-size\", function (d) {\n        return _this2.fontSizes[d.group];\n      }).attr(\"fill\", function (d) {\n        return d.link ? _this2.linkColor : _this2.nonLinkColor;\n      }).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(function (d) {\n        return d.name1;\n      });\n      textRegion.filter(function (d) {\n        return d.name2;\n      }).append(\"text\").attr(\"x\", \"0em\").attr(\"y\", \"0.69em\").attr(\"font-size\", function (d) {\n        return _this2.fontSizes[d.group];\n      }).attr(\"fill\", function (d) {\n        return d.link ? _this2.linkColor : _this2.nonLinkColor;\n      }).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(function (d) {\n        return d.name2;\n      });\n      textRegion.filter(function (d) {\n        return d.name3;\n      }).append(\"text\").attr(\"x\", \"0em\").attr(\"y\", \"-0.96em\").attr(\"font-size\", function (d) {\n        return _this2.fontSizes[d.group];\n      }).attr(\"fill\", function (d) {\n        return d.link ? _this2.linkColor : _this2.nonLinkColor;\n      }).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(function (d) {\n        return d.name3;\n      });\n      textRegion.filter(function (d) {\n        return d.name4;\n      }).append(\"text\").attr(\"x\", \"0em\").attr(\"y\", \"0.14em\").attr(\"font-size\", function (d) {\n        return _this2.fontSizes[d.group];\n      }).attr(\"fill\", function (d) {\n        return d.link ? _this2.linkColor : _this2.nonLinkColor;\n      }).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(function (d) {\n        return d.name4;\n      });\n      textRegion.filter(function (d) {\n        return d.name5;\n      }).append(\"text\").attr(\"x\", \"0em\").attr(\"y\", \"1.24em\").attr(\"font-size\", function (d) {\n        return _this2.fontSizes[d.group];\n      }).attr(\"fill\", function (d) {\n        return d.link ? _this2.linkColor : _this2.nonLinkColor;\n      }).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(function (d) {\n        return d.name5;\n      });\n      simulation.alpha(1).restart();\n    },\n    updateForces: function updateForces() {\n      var simulation = this.simulation,\n          forceProperties = this.forceProperties,\n          width = this.width,\n          height = this.height;\n      simulation.force(\"center\").x(width * forceProperties.center.x).y(height * forceProperties.center.y);\n      simulation.force(\"charge\").strength(forceProperties.charge.strength * forceProperties.charge.enabled).distanceMin(forceProperties.charge.distanceMin).distanceMax(forceProperties.charge.distanceMax);\n      simulation.force(\"collide\").strength(forceProperties.collide.strength * forceProperties.collide.enabled).radius(forceProperties.collide.radius).iterations(forceProperties.collide.iterations);\n      simulation.force(\"forceX\").strength(forceProperties.forceX.strength * forceProperties.forceX.enabled).x(width * forceProperties.forceX.x);\n      simulation.force(\"forceY\").strength(forceProperties.forceY.strength * forceProperties.forceY.enabled).y(height * forceProperties.forceY.y);\n      simulation.force(\"link\").distance(forceProperties.link.distance).iterations(forceProperties.link.iterations); // updates ignored until this is run\n      // restarts the simulation (important if simulation has already slowed down)\n\n      simulation.alpha(1).restart();\n    },\n    zoomed: function zoomed() {\n      var transform = d3.event.transform; // The trick here is to move the grid in a way that the user doesn't perceive\n      // that the axis aren't really moving\n      // The actual movement is between 0 and gridSize only for x and y\n      // const translate =\n      //   (transform.x % (this.gridSize * transform.k)) +\n      //   \",\" +\n      //   (transform.y % (this.gridSize * transform.k));\n      // this.selections.grid.attr(\n      //   \"transform\",\n      //   \"translate(\" + translate + \") scale(\" + transform.k + \")\"\n      // );\n\n      this.selections.graph.attr(\"transform\", transform); // Define some world boundaries based on the graph total size\n      // so we don't scroll indefinitely\n\n      var graphBox = this.selections.graph.node().getBBox(); // console.log(`graphBox.x: ${graphBox.x}`);\n      // console.log(`graphBox.y: ${graphBox.y}`);\n      // console.log(`graphBox.width: ${graphBox.width}`);\n      // console.log(`graphBox.height: ${graphBox.height}`);\n\n      var margin_x = 8000;\n      var total_x = graphBox.width + 2 * margin_x;\n      var total_y = total_x / 3 * 2;\n      var margin_y = (total_y - graphBox.height) / 2;\n      var worldTopLeft = [graphBox.x - margin_x, graphBox.y - margin_y];\n      var worldBottomRight = [graphBox.x + graphBox.width + margin_x, graphBox.y + graphBox.height + margin_y];\n      this.zoom.translateExtent([worldTopLeft, worldBottomRight]);\n    },\n    nodeDragStarted: function nodeDragStarted(d) {\n      if (!d3.event.active) {\n        this.simulation.alphaTarget(0.3).restart();\n      }\n\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    nodeDragged: function nodeDragged(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    },\n    nodeDragEnded: function nodeDragEnded(d) {\n      if (!d3.event.active) {\n        this.simulation.alphaTarget(0.0001);\n      }\n\n      d.fx = null;\n      d.fy = null;\n    },\n    nodeMouseOver: function nodeMouseOver(d) {\n      var _this3 = this;\n\n      if (d.link) {\n        var allCircles = this.selections.graph.selectAll(\"circle\");\n        var allText = this.selections.graph.selectAll(\"text\");\n        var mouseOverCircle = allCircles.filter(function (td) {\n          return td === d;\n        });\n        var mouseOverText = allText.filter(function (td) {\n          return td === d;\n        });\n        allCircles.classed(\"hover\", false);\n        mouseOverCircle.classed(\"hover\", true);\n        mouseOverCircle // .style(\"fill\", d => (this.patterns.indexOf(d.name1) >= 0)? `url(#${d.name1})`:\"\")\n        .transition().ease(d3.easeElastic).duration(800).attr(\"r\", this.circleSizes[d.group] * this.enlargeRatioOnHover); // .attr(\"transform\", \"scale(1.5)\")\n        // d3.select(\"#Jordan-img\")\n        //   .transition()\n        //   .ease(d3.easeElastic)\n        //   .duration(800)\n        //   .attr(\"transform\", \"scale(2.25)\")\n        // .attr(\"x\", \"0\")\n        // .attr(\"y\", \"0\")\n\n        mouseOverText.transition().ease(d3.easeElastic).duration(800) // .attr(\"x\", 0)\n        // .attr(\"fill\", \"#ffffff\")\n        // .attr(\"fill-opacity\", \"0\")\n        .attr(\"font-size\", function (d) {\n          return _this3.fontSizes[d.group] * _this3.enlargeRatioOnHover;\n        });\n      }\n    },\n    nodeMouseOut: function nodeMouseOut(d) {\n      var _this4 = this;\n\n      var allCircles = this.selections.graph.selectAll(\"circle\");\n      var allText = this.selections.graph.selectAll(\"text\");\n      var mouseOutCircle = allCircles.filter(function (td) {\n        return td === d;\n      });\n      var mouseOutText = allText.filter(function (td) {\n        return td === d;\n      });\n      allCircles.classed(\"hover\", false);\n      mouseOutCircle.transition().ease(d3.easeElastic).duration(800).attr(\"r\", function (d) {\n        return _this4.circleSizes[d.group];\n      }); // .style(\"fill\", d => \"\")\n      // d3.select(\"#Jordan-img\")\n      //   .transition()\n      //   .ease(d3.easeElastic)\n      //   .duration(800)\n      // .attr(\"transform\", \"scale(0.66667)\")\n\n      mouseOutText.transition().ease(d3.easeElastic).duration(800) // .attr(\"x\", 0)\n      // .attr(\"y\", \"0.31em\")\n      // .attr(\"fill-opacity\", \"1\")\n      .attr(\"font-size\", function (d) {\n        return _this4.fontSizes[d.group];\n      });\n    },\n    nodeClick: function nodeClick(d) {\n      if (d.link) {\n        window.open(d.link);\n      }\n    },\n    resizeCanvas: function resizeCanvas() {\n      if (window.innerWidth != this.previousWindowWidth) {\n        this.width = document.getElementById(\"interests\").clientWidth;\n        this.height = this.width * 2 / 3; // this.height = this.width>576? (this.width * 2) / 3 : this.width;\n\n        this.previousWindowWidth = window.innerWidth; // Update the centering force\n        // update center location, then restart simulation\n        // otherwise, if cooled down already, won't be responsive\n\n        var simulation = this.simulation,\n            forceProperties = this.forceProperties,\n            width = this.width,\n            height = this.height;\n        simulation.force(\"center\").x(width * forceProperties.center.x).y(height * forceProperties.center.y);\n        simulation.force(\"forceX\").strength(forceProperties.forceX.strength * forceProperties.forceX.enabled).x(width * forceProperties.forceX.x);\n        simulation.force(\"forceY\").strength(forceProperties.forceY.strength * forceProperties.forceY.enabled).y(height * forceProperties.forceY.y);\n        simulation.alpha(1).restart();\n      }\n    },\n    scrollListener: function scrollListener(e) {\n      e.preventDefault();\n    }\n  },\n  watch: {\n    data: {\n      handler: function handler() {\n        this.updateData();\n      },\n      deep: true\n    },\n    forceProperties: {\n      handler: function handler() {\n        this.updateForces();\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"sources":["MyGraph.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"my-graph\"\n    :style=\"{\n      width: '100%',\n      height: height + 'px'\n    }\"\n  >\n    <svg :width=\"width\" :height=\"height\" class=\"my-graph-svg cutout\">\n      <defs>\n        <!-- <filter id=\"f3\" x=\"0\" y=\"0\" width=\"130%\" height=\"130%\">\n          <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\" />\n          <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"3\" />\n          <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n        </filter> -->\n        <filter id=\"dropshadow\" x=\"0\" y=\"0\" width=\"130%\" height=\"130%\">\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\n          <!-- stdDeviation is how much to blur -->\n          <feOffset dx=\"2\" dy=\"2\" result=\"offset-blur\" />\n          <!-- how much to offset -->\n          <feComponentTransfer>\n            <feFuncA type=\"linear\" slope=\"0.4\" result=\"offset-opacity-blur\" />\n            <!-- slope is the opacity of the shadow -->\n          </feComponentTransfer>\n          <feMerge>\n            <feMergeNode in=\"offset-opacity-blur\" />\n            <!-- this contains the offset blurred image -->\n            <feMergeNode in=\"SourceGraphic\" />\n            <!-- this contains the element that the filter is applied to -->\n          </feMerge>\n        </filter>\n        <!-- <pattern id=\"Andrew\" x=\"0\" y=\"0\" height=\"1\" width=\"1\">\n          <image\n            x=\"0\"\n            y=\"0\"\n            width=\"60\"\n            height=\"60\"\n            xlink:href=\"https://yt3.ggpht.com/a-/AN66SAzs8DmwITc00osvw7xV_blFvWfisegTxaxhVw=s288-mo-c-c0xffffffff-rj-k-no\"\n          ></image>\n        </pattern>\n        <pattern id=\"Jordan\" x=\"0\" y=\"0\" height=\"1\" width=\"1\">\n          <image\n            id=\"Jordan-img\"\n            x=\"0\"\n            y=\"0\"\n            width=\"44\"\n            height=\"44\"\n            :xlink:href=\"require(`@/assets/avatars/jordan.png`)\"\n          ></image>\n        </pattern> -->\n        <pattern\n          id=\"innerGrid\"\n          :width=\"innerGridSize\"\n          :height=\"innerGridSize\"\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <rect\n            width=\"100%\"\n            height=\"100%\"\n            fill=\"none\"\n            stroke=\"#CCCCCC7A\"\n            stroke-width=\"0.5\"\n          />\n        </pattern>\n        <pattern\n          id=\"grid\"\n          :width=\"gridSize\"\n          :height=\"gridSize\"\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <rect\n            width=\"100%\"\n            height=\"100%\"\n            fill=\"url(#innerGrid)\"\n            stroke=\"#CCCCCC7A\"\n            stroke-width=\"1.5\"\n          />\n        </pattern>\n      </defs>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  name: \"MyGraph\",\n  data: () => ({\n    previousWindowWidth: null,\n    width: null,\n    height: null,\n    gridSize: 100,\n    selections: {},\n    pathStrokeWidth: [1.5, 1.25, 1, 1],\n    circleSizes: [44, 37, 33, 30, 30],\n    fontSizes: [25, 15, 12, 11, 11],\n    linkColor: \"#ffffff\",\n    nonLinkColor: \"#000000\",\n    enlargeRatioOnHover: 2,\n    patterns: [\"Andrew\", \"Jordan\"],\n    simulation: null,\n    zoom: null,\n    forceProperties: {\n      center: {\n        x: 0.5,\n        y: 0.5\n      },\n      charge: {\n        enabled: true,\n        strength: -2000,\n        distanceMin: 1,\n        distanceMax: 2000\n      },\n      collide: {\n        enabled: true,\n        strength: 1,\n        iterations: 1,\n        radius: 55\n      },\n      forceX: {\n        enabled: true,\n        strength: 0.18,\n        x: 0.5\n      },\n      forceY: {\n        enabled: true,\n        strength: 0.28,\n        y: 0.5\n      },\n      link: {\n        enabled: true,\n        distance: 35,\n        iterations: 1\n      }\n    },\n    data: {\n      nodes: [],\n      links: []\n    }\n  }),\n  computed: {\n    innerGridSize() {\n      return this.gridSize / 10;\n    },\n    nodes() {\n      return this.data.nodes;\n    },\n    links() {\n      return this.data.links;\n    }\n  },\n  created() {},\n  mounted() {\n    // Get initial width when things are mounted\n    // also add listener for width change\n    this.width = document.getElementById(\"interests\").clientWidth;\n    this.height = (this.width * 2) / 3;\n    // this.height = this.width>576? (this.width * 2) / 3 : this.width;\n    window.addEventListener(\"resize\", this.resizeCanvas);\n\n    // Attach event listener to prevent scrolling inside the nodes graph\n    // document.getElementById(\"nodes\").addEventListener(\"wheel\", this.scrollListener);\n\n    // Moved here from created\n    this.simulation = d3\n      .forceSimulation()\n      .force(\"link\", d3.forceLink())\n      .force(\"charge\", d3.forceManyBody())\n      .force(\"collide\", d3.forceCollide())\n      .force(\"center\", d3.forceCenter())\n      .force(\"forceX\", d3.forceX())\n      .force(\"forceY\", d3.forceY())\n      .on(\"tick\", this.tick);\n    // Call first time to setup default values\n    this.updateForces();\n\n    this.selections.svg = d3.select(this.$el.querySelector(\"svg\"));\n    const svg = this.selections.svg;\n\n    // Add zoom and panning triggers\n    this.zoom = d3\n      .zoom()\n      .scaleExtent([1 / 3, 2])\n      .on(\"zoom\", this.zoomed);\n    svg.call(this.zoom);\n\n    // A background grid to help user experience\n    // The width and height depends on the minimum scale extent and\n    // the + 10% and negative index to create an infinite grid feel\n    // The precedence of this element is important since you'll have\n    // click events on the elements above the grid\n    // this.selections.grid = svg\n    //   .append(\"rect\")\n    //   .attr(\"x\", \"-50%\")\n    //   .attr(\"y\", \"-50%\")\n    //   .attr(\"width\", \"450%\")\n    //   .attr(\"height\", \"450%\")\n    //   .attr(\"fill\", \"url(#grid)\");\n\n    this.selections.graph = svg.append(\"g\");\n    // const graph = this.selections.graph;\n\n    // You can set data in any ways you want\n    d3.json(\"/mydata.json\")\n      .then(data => {\n        this.data = data;\n      })\n      .catch(error => {\n        // eslint-disable-next-line\n        console.error(`Failed to retrieve data. Error: ${error}`);\n      });\n  },\n  beforeDestroy: function() {\n    window.removeEventListener(\"resize\", this.resizeCanvas);\n    // document.getElementById(\"nodes\").removeEventListener(\"wheel\", this.scrollListener);\n  },\n  methods: {\n    tick() {\n      // only run when the graph is moving, stops when the graph settles\n      const transform = d => {\n        // return \"translate(\" + Math.max(30, Math.min(this.width - 30, d.x)) + \",\" + Math.max(30, Math.min(this.height - 30, d.y)) + \")\";\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      };\n\n      const link = d => {\n        return (\n          \"M\" +\n          d.source.x +\n          \",\" +\n          d.source.y +\n          \" L\" +\n          d.target.x +\n          \",\" +\n          d.target.y\n        );\n      };\n\n      const graph = this.selections.graph;\n      graph.selectAll(\"path\").attr(\"d\", link);\n      graph.selectAll(\"circle\").attr(\"transform\", transform);\n      graph.selectAll(\"text\").attr(\"transform\", transform);\n    },\n    updateData() {\n      this.simulation.nodes(this.nodes);\n      this.simulation.force(\"link\").links(this.links);\n\n      const simulation = this.simulation;\n      const graph = this.selections.graph;\n\n      // Links should only exit if not needed anymore\n      graph\n        .selectAll(\"path\")\n        .data(this.links)\n        .exit()\n        .remove();\n\n      graph\n        .selectAll(\"path\")\n        .data(this.links)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"link\")\n        .attr(\"stroke-width\", l => this.pathStrokeWidth[l.value]);\n\n      // Nodes should always be redrawn to avoid lines above them\n      graph.select(\"#circles\").remove();\n      graph.selectAll(\"circle\").remove();\n\n      // const circles = graph.append(\"g\").attr(\"id\", \"circles\");\n      graph\n        .append(\"g\")\n        .attr(\"id\", \"circles\")\n        // .attr(\"filter\", \"url(#f3)\")\n        .selectAll(\"circle\")\n        .data(this.nodes)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", d => this.circleSizes[d.group])\n        .attr(\"class\", d =>\n          d.link ? \" my-graph-circle url\" : \"my-graph-circle nonurl\"\n        )\n        .call(\n          d3\n            .drag()\n            .on(\"start\", this.nodeDragStarted)\n            .on(\"drag\", this.nodeDragged)\n            .on(\"end\", this.nodeDragEnded)\n        )\n        .on(\"mouseover\", this.nodeMouseOver)\n        .on(\"mouseout\", this.nodeMouseOut)\n        .on(\"click\", this.nodeClick);\n\n      graph.selectAll(\"text\").remove();\n\n      let textRegion = graph\n        .selectAll(\"text\")\n        .data(this.nodes)\n        .enter();\n      textRegion\n        .filter(d => d.name)\n        .append(\"text\")\n        .attr(\"x\", \"0em\")\n        .attr(\"y\", \"0.14em\") //.31em\n        .attr(\"font-size\", d => this.fontSizes[d.group])\n        .attr(\"fill\", d => (d.link ? this.linkColor : this.nonLinkColor))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d => d.name);\n      textRegion\n        .filter(d => d.name1)\n        .append(\"text\")\n        .attr(\"x\", \"0em\")\n        .attr(\"y\", \"-0.41em\")\n        .attr(\"font-size\", d => this.fontSizes[d.group])\n        .attr(\"fill\", d => (d.link ? this.linkColor : this.nonLinkColor))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d => d.name1);\n      textRegion\n        .filter(d => d.name2)\n        .append(\"text\")\n        .attr(\"x\", \"0em\")\n        .attr(\"y\", \"0.69em\")\n        .attr(\"font-size\", d => this.fontSizes[d.group])\n        .attr(\"fill\", d => (d.link ? this.linkColor : this.nonLinkColor))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d => d.name2);\n      textRegion\n        .filter(d => d.name3)\n        .append(\"text\")\n        .attr(\"x\", \"0em\")\n        .attr(\"y\", \"-0.96em\")\n        .attr(\"font-size\", d => this.fontSizes[d.group])\n        .attr(\"fill\", d => (d.link ? this.linkColor : this.nonLinkColor))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d => d.name3);\n      textRegion\n        .filter(d => d.name4)\n        .append(\"text\")\n        .attr(\"x\", \"0em\")\n        .attr(\"y\", \"0.14em\")\n        .attr(\"font-size\", d => this.fontSizes[d.group])\n        .attr(\"fill\", d => (d.link ? this.linkColor : this.nonLinkColor))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d => d.name4);\n      textRegion\n        .filter(d => d.name5)\n        .append(\"text\")\n        .attr(\"x\", \"0em\")\n        .attr(\"y\", \"1.24em\")\n        .attr(\"font-size\", d => this.fontSizes[d.group])\n        .attr(\"fill\", d => (d.link ? this.linkColor : this.nonLinkColor))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d => d.name5);\n\n      simulation.alpha(1).restart();\n    },\n    updateForces() {\n      const { simulation, forceProperties, width, height } = this;\n      simulation\n        .force(\"center\")\n        .x(width * forceProperties.center.x)\n        .y(height * forceProperties.center.y);\n      simulation\n        .force(\"charge\")\n        .strength(\n          forceProperties.charge.strength * forceProperties.charge.enabled\n        )\n        .distanceMin(forceProperties.charge.distanceMin)\n        .distanceMax(forceProperties.charge.distanceMax);\n      simulation\n        .force(\"collide\")\n        .strength(\n          forceProperties.collide.strength * forceProperties.collide.enabled\n        )\n        .radius(forceProperties.collide.radius)\n        .iterations(forceProperties.collide.iterations);\n      simulation\n        .force(\"forceX\")\n        .strength(\n          forceProperties.forceX.strength * forceProperties.forceX.enabled\n        )\n        .x(width * forceProperties.forceX.x);\n      simulation\n        .force(\"forceY\")\n        .strength(\n          forceProperties.forceY.strength * forceProperties.forceY.enabled\n        )\n        .y(height * forceProperties.forceY.y);\n      simulation\n        .force(\"link\")\n        .distance(forceProperties.link.distance)\n        .iterations(forceProperties.link.iterations);\n\n      // updates ignored until this is run\n      // restarts the simulation (important if simulation has already slowed down)\n      simulation.alpha(1).restart();\n    },\n    zoomed() {\n      const transform = d3.event.transform;\n      // The trick here is to move the grid in a way that the user doesn't perceive\n      // that the axis aren't really moving\n      // The actual movement is between 0 and gridSize only for x and y\n      // const translate =\n      //   (transform.x % (this.gridSize * transform.k)) +\n      //   \",\" +\n      //   (transform.y % (this.gridSize * transform.k));\n      // this.selections.grid.attr(\n      //   \"transform\",\n      //   \"translate(\" + translate + \") scale(\" + transform.k + \")\"\n      // );\n      this.selections.graph.attr(\"transform\", transform);\n\n      // Define some world boundaries based on the graph total size\n      // so we don't scroll indefinitely\n      const graphBox = this.selections.graph.node().getBBox();\n      // console.log(`graphBox.x: ${graphBox.x}`);\n      // console.log(`graphBox.y: ${graphBox.y}`);\n      // console.log(`graphBox.width: ${graphBox.width}`);\n      // console.log(`graphBox.height: ${graphBox.height}`);\n      const margin_x = 8000;\n      const total_x = graphBox.width + 2 * margin_x;\n      const total_y = (total_x / 3) * 2;\n      const margin_y = (total_y - graphBox.height) / 2;\n      const worldTopLeft = [graphBox.x - margin_x, graphBox.y - margin_y];\n      const worldBottomRight = [\n        graphBox.x + graphBox.width + margin_x,\n        graphBox.y + graphBox.height + margin_y\n      ];\n      this.zoom.translateExtent([worldTopLeft, worldBottomRight]);\n    },\n    nodeDragStarted(d) {\n      if (!d3.event.active) {\n        this.simulation.alphaTarget(0.3).restart();\n      }\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    nodeDragged(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    },\n    nodeDragEnded(d) {\n      if (!d3.event.active) {\n        this.simulation.alphaTarget(0.0001);\n      }\n      d.fx = null;\n      d.fy = null;\n    },\n    nodeMouseOver(d) {\n      if (d.link) {\n        const allCircles = this.selections.graph.selectAll(\"circle\");\n        const allText = this.selections.graph.selectAll(\"text\");\n        const mouseOverCircle = allCircles.filter(td => td === d);\n        const mouseOverText = allText.filter(td => td === d);\n        allCircles.classed(\"hover\", false);\n        mouseOverCircle.classed(\"hover\", true);\n        mouseOverCircle\n          // .style(\"fill\", d => (this.patterns.indexOf(d.name1) >= 0)? `url(#${d.name1})`:\"\")\n          .transition()\n          .ease(d3.easeElastic)\n          .duration(800)\n          .attr(\"r\", this.circleSizes[d.group] * this.enlargeRatioOnHover);\n        // .attr(\"transform\", \"scale(1.5)\")\n\n        // d3.select(\"#Jordan-img\")\n        //   .transition()\n        //   .ease(d3.easeElastic)\n        //   .duration(800)\n        //   .attr(\"transform\", \"scale(2.25)\")\n        // .attr(\"x\", \"0\")\n        // .attr(\"y\", \"0\")\n\n        mouseOverText\n          .transition()\n          .ease(d3.easeElastic)\n          .duration(800)\n          // .attr(\"x\", 0)\n          // .attr(\"fill\", \"#ffffff\")\n          // .attr(\"fill-opacity\", \"0\")\n          .attr(\n            \"font-size\",\n            d => this.fontSizes[d.group] * this.enlargeRatioOnHover\n          );\n      }\n    },\n    nodeMouseOut(d) {\n      const allCircles = this.selections.graph.selectAll(\"circle\");\n      const allText = this.selections.graph.selectAll(\"text\");\n      const mouseOutCircle = allCircles.filter(td => td === d);\n      const mouseOutText = allText.filter(td => td === d);\n      allCircles.classed(\"hover\", false);\n      mouseOutCircle\n        .transition()\n        .ease(d3.easeElastic)\n        .duration(800)\n        .attr(\"r\", d => this.circleSizes[d.group]);\n      // .style(\"fill\", d => \"\")\n\n      // d3.select(\"#Jordan-img\")\n      //   .transition()\n      //   .ease(d3.easeElastic)\n      //   .duration(800)\n      // .attr(\"transform\", \"scale(0.66667)\")\n\n      mouseOutText\n        .transition()\n        .ease(d3.easeElastic)\n        .duration(800)\n        // .attr(\"x\", 0)\n        // .attr(\"y\", \"0.31em\")\n        // .attr(\"fill-opacity\", \"1\")\n        .attr(\"font-size\", d => this.fontSizes[d.group]);\n    },\n    nodeClick(d) {\n      if (d.link) {\n        window.open(d.link);\n      }\n    },\n    resizeCanvas() {\n      if (window.innerWidth != this.previousWindowWidth) {\n        this.width = document.getElementById(\"interests\").clientWidth;\n        this.height = (this.width * 2) / 3;\n        // this.height = this.width>576? (this.width * 2) / 3 : this.width;\n        this.previousWindowWidth = window.innerWidth;\n\n        // Update the centering force\n        // update center location, then restart simulation\n        // otherwise, if cooled down already, won't be responsive\n        const { simulation, forceProperties, width, height } = this;\n        simulation\n          .force(\"center\")\n          .x(width * forceProperties.center.x)\n          .y(height * forceProperties.center.y);\n        simulation\n          .force(\"forceX\")\n          .strength(\n            forceProperties.forceX.strength * forceProperties.forceX.enabled\n          )\n          .x(width * forceProperties.forceX.x);\n        simulation\n          .force(\"forceY\")\n          .strength(\n            forceProperties.forceY.strength * forceProperties.forceY.enabled\n          )\n          .y(height * forceProperties.forceY.y);\n        simulation.alpha(1).restart();\n      }\n    },\n    scrollListener(e) {\n      e.preventDefault();\n    }\n  },\n  watch: {\n    data: {\n      handler() {\n        this.updateData();\n      },\n      deep: true\n    },\n    forceProperties: {\n      handler() {\n        this.updateForces();\n      },\n      deep: true\n    }\n  }\n};\n</script>\n\n<style>\n.my-graph {\n  padding-top: 3rem;\n}\n@media screen and (max-width: 600px) {\n  .my-graph {\n    padding-top: 1rem;\n  }\n}\n.faded {\n  opacity: 0.1;\n  transition: 0.3s opacity;\n}\n.highlight {\n  opacity: 1;\n}\npath.link {\n  fill: none;\n  stroke: #aaaaaa;\n}\ncircle.my-graph-circle {\n  transition: 0.3s fill;\n  stroke-width: 1px;\n  fill: #eeeeee;\n  opacity: 0.9;\n}\ncircle.url {\n  fill: #004e79;\n}\ncircle.hover {\n  cursor: pointer;\n  fill: #0085ce;\n  transition: 0.3s fill;\n}\ntext {\n  /* font: 12px FuturaPT; */\n  pointer-events: none;\n}\n</style>\n"],"sourceRoot":"src/components"}]}