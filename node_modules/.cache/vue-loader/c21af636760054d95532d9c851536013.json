{"remainingRequest":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/src/views/Tetris.vue?vue&type=template&id=b06d7f5a&scoped=true&","dependencies":[{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/src/views/Tetris.vue","mtime":1550154016000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jianan/Downloads/jianan-li-7da60da5c1783239049a7a6e7b5f3395f46b33f7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"tetris\" },\n    [\n      _c(\"div\", { staticClass: \"page-body\" }, [\n        _vm._m(0),\n        _c(\n          \"div\",\n          { staticClass: \"project-content\" },\n          [\n            _c(\"div\", { staticClass: \"project-title\" }, [\n              _vm._v(\"Handheld Tetris Game\")\n            ]),\n            _c(\"div\", { staticClass: \"project-date\" }, [\n              _vm._v(\"09/2013 - 02/2014\")\n            ]),\n            _vm._m(1),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"BREADBOARD V1\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/1.jpg\"),\n                  alt: \"tetris-1\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          When I built the first version on the breadboard, I didn't know that\\n          these LED matrices are supposed to be driven by constant current LED\\n          drivers. I used the 74HC595 shift registers to both source and sink\\n          the current, which caused significant flickering on the display due\\n          to their limited output current.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"BREADBOARD V2\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/2.jpg\"),\n                  alt: \"tetris-2\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          In order to enhance the gaming experience, I added an 8 ohm speaker\\n          for playing the Tetris theme. After spending way too much time\\n          trying to figure out how to play the music and refresh the display\\n          at the same time (both need timer interrupt), I reluctantly decided\\n          to use an ATtiny85 microcontroller to handle the music. Two pins on\\n          the ATmega328P are used to control the ATtiny85 so that when the\\n          game is paused/restarted, the music is also paused/restarted.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"BREADBOARD V3\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/3.jpg\"),\n                  alt: \"tetris-3\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          I added a 10-segment LED bar graph, driven by a LM3914, to indicate\\n          the level. When the game is started, the first segment flashes and\\n          the other segments are off. After five lines are cleared, the first\\n          segment becomes solid, and the second segment starts flashing. For\\n          every five lines cleared, an additional segment on the LED bar graph\\n          becomes solid.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"BREADBOARD V4\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/4.jpg\"),\n                  alt: \"tetris-4\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          I finally replaced the 74HC595 shift registers with a MIC5891 source\\n          driver and three STP16DP05 constant current sink drivers. The result\\n          is that the brightness of each LED is no longer affected by the\\n          number of LEDs turned on in the same column. I added an MMA8452Q\\n          accelerometer so that you can move the tetromino to the left/right\\n          with a gentle shake in that direction. I also added a vibration\\n          motor to provide vibration feedback when lines are cleared.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"THE ASSEMBLED PCB\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/5.jpg\"),\n                  alt: \"tetris-5\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          This was my first time designing a PCB and using EAGLE. I used the\\n          surface mount package for the resistors, the capacitors, the diode,\\n          the voltage regulators, and the STP16DP05 LED drivers. The buttons\\n          are arranged in a similar way to the Game Boy. The programming\\n          ports, the power switch, and the sound switch are all placed near\\n          the bottom.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"BATTERY AND CHARGING\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/6.jpg\"),\n                  alt: \"tetris-6\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          The system is powered by a 2S 7.4V 1300mAh LiPo battery. A 2S LiPo\\n          battery charger is needed for recharging. In order to make the\\n          device as thin as possible, I took apart the battery pack and\\n          arranged the two cells side by side. I also moved the piezo speaker\\n          to the back of the PCB because it didn't quite fit under the LED\\n          matrix.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"3D PRINTED ENCLOSURE\")\n              ]),\n              _c(\"img\", {\n                staticClass: \"project-process-pic card-no-hover\",\n                attrs: {\n                  src: require(\"@/assets/tetris/7.jpg\"),\n                  alt: \"tetris-7\"\n                }\n              }),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          This was my first time using SolidWorks. The enclosure and the\\n          button caps were printed on a Stratasys 3D printer in ABS. Four M3\\n          screws are used to hold the two halves of the enclosure together.\\n          The device has a thickness of 25mm, which is about the same as the\\n          Game Boy Pocket.\\n        \"\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"Game Control\")\n              ]),\n              _c(\n                \"video\",\n                {\n                  staticClass: \"project-process-pic card-no-hover\",\n                  attrs: { autoplay: \"\", loop: \"\", muted: \"\", playsinline: \"\" },\n                  domProps: { muted: true }\n                },\n                [\n                  _c(\"source\", {\n                    attrs: {\n                      src: require(\"@/assets/tetris/8.webm\"),\n                      type: \"video/webm\"\n                    }\n                  }),\n                  _c(\"source\", {\n                    attrs: {\n                      src: require(\"@/assets/tetris/8.mp4\"),\n                      type: \"video/mp4\"\n                    }\n                  })\n                ]\n              ),\n              _c(\"p\", [\n                _vm._v(\"Left/Right - Move the tetromino to the left/right\")\n              ]),\n              _c(\"p\", [_vm._v(\"Up - Rotate the tetromino\")]),\n              _c(\"p\", [_vm._v(\"Down - Drop the tetromino by one line\")]),\n              _c(\"p\", [_vm._v(\"A - Drop the tetromino to the bottom\")]),\n              _c(\"p\", [_vm._v(\"B - Pause/Resume the game\")]),\n              _c(\"p\", [_vm._v(\"Start - Restart the game\")])\n            ]),\n            _c(\"div\", { staticClass: \"project-section\" }, [\n              _c(\"div\", { staticClass: \"project-section-title\" }, [\n                _vm._v(\"GAME OVER\")\n              ]),\n              _c(\n                \"video\",\n                {\n                  staticClass: \"project-process-pic card-no-hover\",\n                  attrs: { autoplay: \"\", loop: \"\", muted: \"\", playsinline: \"\" },\n                  domProps: { muted: true }\n                },\n                [\n                  _c(\"source\", {\n                    attrs: {\n                      src: require(\"@/assets/tetris/9.webm\"),\n                      type: \"video/webm\"\n                    }\n                  }),\n                  _c(\"source\", {\n                    attrs: {\n                      src: require(\"@/assets/tetris/9.mp4\"),\n                      type: \"video/mp4\"\n                    }\n                  })\n                ]\n              ),\n              _c(\"p\", [\n                _vm._v(\n                  '\\n          When the games ends, a scrolling \"Game Over\" message in a random\\n          color is displayed in the center of the screen. You can then restart\\n          the game by pressing the START button (below the A and B buttons).\\n        '\n                )\n              ])\n            ]),\n            _c(\"ProjectNavigation\", { attrs: { next: \"FloorPiano\" } })\n          ],\n          1\n        )\n      ]),\n      _c(\"SiteFooter\")\n    ],\n    1\n  )\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"project-youtube-video-container\" }, [\n      _c(\"iframe\", {\n        staticClass: \"project-youtube-video\",\n        attrs: {\n          src: \"https://www.youtube.com/embed/kC6plYjMdA0\",\n          frameborder: \"0\",\n          allowfullscreen: \"\"\n        }\n      })\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"project-description\" }, [\n      _c(\"p\", [\n        _vm._v(\n          \"\\n          Ever since I started working on DIY electronics projects, I have\\n          been fascinated with all the different LED matrix projects on the\\n          internet. After reading through the details on some of these\\n          projects, I realized that not only are they fun to work on, but they\\n          teach you a great deal about electronics. Being a huge Tetris fan, I\\n          decided to make a Tetris game console with an RGB LED matrix\\n          display.\\n        \"\n        )\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"\\n          After a few breadboard iterations, a Tetris game packed with\\n          hardware features was born. It has a beautiful 16x8 RGB LED matrix\\n          display, two LED bargraphs that indicate the current level, and a 3D\\n          printed enclosure. It plays the Tetris theme while the game is in\\n          progress, allows you to control the game using the buttons or the\\n          accelerometer, and provides haptic feedback using the vibration\\n          motor.\\n        \"\n        )\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"\\n          In the video, I show you what this device looks like on the inside,\\n          and give a demo showing all the hardware and software features.\\n          Check out the pictures below If you're interested in learning more\\n          about this project. The design files and source code for this\\n          project are available\\n          \"\n        ),\n        _c(\n          \"a\",\n          {\n            attrs: {\n              href: \"https://github.com/Jianan-Li/Handheld-Tetris-Game\",\n              target: \"_blank\",\n              rel: \"noreferrer\"\n            }\n          },\n          [_vm._v(\"here\")]\n        ),\n        _vm._v(\".\\n        \")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}